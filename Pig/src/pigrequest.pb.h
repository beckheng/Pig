// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pigrequest.proto

#ifndef PROTOBUF_pigrequest_2eproto__INCLUDED
#define PROTOBUF_pigrequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Pig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pigrequest_2eproto();
void protobuf_AssignDesc_pigrequest_2eproto();
void protobuf_ShutdownFile_pigrequest_2eproto();

class PigRequest;

// ===================================================================

class PigRequest : public ::google::protobuf::Message {
 public:
  PigRequest();
  virtual ~PigRequest();

  PigRequest(const PigRequest& from);

  inline PigRequest& operator=(const PigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PigRequest& default_instance();

  void Swap(PigRequest* other);

  // implements Message ----------------------------------------------

  PigRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PigRequest& from);
  void MergeFrom(const PigRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  inline ::std::string* release_action();
  inline void set_allocated_action(::std::string* action);

  // optional string body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // optional string extra = 3;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 3;
  inline const ::std::string& extra() const;
  inline void set_extra(const ::std::string& value);
  inline void set_extra(const char* value);
  inline void set_extra(const char* value, size_t size);
  inline ::std::string* mutable_extra();
  inline ::std::string* release_extra();
  inline void set_allocated_extra(::std::string* extra);

  // @@protoc_insertion_point(class_scope:Pig.PigRequest)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_extra();
  inline void clear_has_extra();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* action_;
  ::std::string* body_;
  ::std::string* extra_;
  friend void  protobuf_AddDesc_pigrequest_2eproto();
  friend void protobuf_AssignDesc_pigrequest_2eproto();
  friend void protobuf_ShutdownFile_pigrequest_2eproto();

  void InitAsDefaultInstance();
  static PigRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// PigRequest

// required string action = 1;
inline bool PigRequest::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PigRequest::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PigRequest::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PigRequest::clear_action() {
  if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_->clear();
  }
  clear_has_action();
}
inline const ::std::string& PigRequest::action() const {
  // @@protoc_insertion_point(field_get:Pig.PigRequest.action)
  return *action_;
}
inline void PigRequest::set_action(const ::std::string& value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_ = new ::std::string;
  }
  action_->assign(value);
  // @@protoc_insertion_point(field_set:Pig.PigRequest.action)
}
inline void PigRequest::set_action(const char* value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_ = new ::std::string;
  }
  action_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pig.PigRequest.action)
}
inline void PigRequest::set_action(const char* value, size_t size) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pig.PigRequest.action)
}
inline ::std::string* PigRequest::mutable_action() {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pig.PigRequest.action)
  return action_;
}
inline ::std::string* PigRequest::release_action() {
  clear_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = action_;
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PigRequest::set_allocated_action(::std::string* action) {
  if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete action_;
  }
  if (action) {
    set_has_action();
    action_ = action;
  } else {
    clear_has_action();
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pig.PigRequest.action)
}

// optional string body = 2;
inline bool PigRequest::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PigRequest::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PigRequest::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PigRequest::clear_body() {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& PigRequest::body() const {
  // @@protoc_insertion_point(field_get:Pig.PigRequest.body)
  return *body_;
}
inline void PigRequest::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set:Pig.PigRequest.body)
}
inline void PigRequest::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pig.PigRequest.body)
}
inline void PigRequest::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pig.PigRequest.body)
}
inline ::std::string* PigRequest::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    body_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pig.PigRequest.body)
  return body_;
}
inline ::std::string* PigRequest::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PigRequest::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pig.PigRequest.body)
}

// optional string extra = 3;
inline bool PigRequest::has_extra() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PigRequest::set_has_extra() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PigRequest::clear_has_extra() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PigRequest::clear_extra() {
  if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_->clear();
  }
  clear_has_extra();
}
inline const ::std::string& PigRequest::extra() const {
  // @@protoc_insertion_point(field_get:Pig.PigRequest.extra)
  return *extra_;
}
inline void PigRequest::set_extra(const ::std::string& value) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
  // @@protoc_insertion_point(field_set:Pig.PigRequest.extra)
}
inline void PigRequest::set_extra(const char* value) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
  // @@protoc_insertion_point(field_set_char:Pig.PigRequest.extra)
}
inline void PigRequest::set_extra(const char* value, size_t size) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_ = new ::std::string;
  }
  extra_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Pig.PigRequest.extra)
}
inline ::std::string* PigRequest::mutable_extra() {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Pig.PigRequest.extra)
  return extra_;
}
inline ::std::string* PigRequest::release_extra() {
  clear_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extra_;
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PigRequest::set_allocated_extra(::std::string* extra) {
  if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_;
  }
  if (extra) {
    set_has_extra();
    extra_ = extra;
  } else {
    clear_has_extra();
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Pig.PigRequest.extra)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pig

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pigrequest_2eproto__INCLUDED
